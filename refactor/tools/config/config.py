import os
import json


from tools.utils import build_base_url
from tools.utils import check_connection
from tools.utils import detect_extention

class setup:

    def __init__(self, filename='config.json'):
        '''makes and sets up a file with default valuse'''
        self.filename = filename

        if not os.path.exists(self.filename):
            with open(self.filename,'w') as file:
                file.write(self.makeDefaultFile())


    def setup_configuration_file(self, settings, args):
        '''this will take in the arguments and pass them to the json file'''

        if self.returnSettings()['url'] == "" and args.url != self.returnSettings()['url']:
            if args.url:
                self.changeSetting('url', args.url)
                self.changeSetting('base url', build_base_url(args.url))
                self.changeSetting('extention', detect_extention(args.url))
                self.changeSetting('timeout', int(check_connection(args.url)))

            if args.tech:
                self.changeSetting('tech', args.tech)
            if args.spacific:
                self.changeSetting('spacific', args.spacific)
            if args.debug:
                self.changeSetting('debug_level', args.debug)
        else:
            print("using exsisting configuration file")

    
    def makeDefaultFile(self) -> dict:
        '''returns a json versino of the default valuse'''
        #I will just try the eval the commands based on how the vson stors them
        self.defaulprams = {
            'url':'',
            'base url':'',
            'extention':'',
            'tech':[],
            'timeout':0,
            'debug_level':0,
            "secific_option":None,

            "possible tech":["nginx","apache","joomla","wordpress","Microsoft-ISS","Amazon"],

            "spacific_nuclei_templats":{
                "basic tech":{
                    "nginx":"/home/kali/.local/nuclei-templates/technologies/nginx/",
                    "apache":"/home/kali/.local/nuclei-templates/technologies/apache/",
                    "joomla":"/home/kali/.local/nuclei-templates/technologies/joomla-detect.yaml",
                    "wordpress":"/home/kali/.local/nuclei-templates/technologies/wordpress/",
                    "Microsoft-ISS":"/home/kali/.local/nuclei-templates/technologies/microsoft/",
                    "Amazon":"/home/kali/.local/nuclei-templates/technologies/aws/"
                },
            },
            "fuzzing wordlists":{
                "misconfigurations":{
                    "technology":{
                        "apache":"/usr/share/seclists/Discovery/Web-Content/apache.txt",
                        "nginx":"/usr/share/seclists/Discovery/Web-Content/nginx.txt",
                        "joomla":"/usr/share/seclists/Discovery/Web-Content/CMS/joomla-plugins.fuzz.txt",
                        "wordpress":"/usr/share/seclists/Discovery/Web-Content/CMS/wordpress.fuzz.txt",
                        "Microsoft-ISS":"/usr/share/seclists/Discovery/Web-Content/common.txt",
                        "Amazon":"/usr/share/seclists/Discovery/Web-Content/common.txt",
                    },
                    "configs":{
                        "configs":"wordlists/config.txt",
                        "htaccess":"wordlists/htaccess.txt",
                        "git":"wordlists/git_config.txt",
                        "leaked_configs":"wordlists/leaky-misconfigs.txt",
                        "files_leaked":"wordlists/files_leaked.txt"
                    }
                }
            
            },

            "wafw00f":{
                "comment":"output is split on \\n before regex",
                "commands":{"firewall":"wafw00f -a {url}"},
                "regex":["^(\[\+\] The site.*is behind.*WAF.)"]
            },

            "ffuf":{
                "comment":"output is split on \\n\\n before regex",
                "commands":{"advanced":"ffuf -u {url}FUZZ -w {tech} -mc 200 -e {ext}",
                            "basic":"ffuf -u {url}FUZZ -w {wordlist} -mc 200 -e {ext}"},
                "regex":["^(\[Status:\s200, Size:.+?\\n.+)",
                         "Size: 0, Words: 1, Lines: 1"]
            },

            "nuclei":{
                "comment":"",
                "commands":{"advanced":"nuclei -u {url} -t /home/kali/.local/nuclei-templates/technologies/",
                           "basic":"nuclei -u {url} -t {template}",
                           "waf":"nuclei -u {url} -t /home/kali/.local/nuclei-templates/technologies/waf-detect.yaml",
                           "waf-dns":"nuclei -u {url} -t /home/kali/.local/nuclei-templates/dns/dns-waf-detect.yaml"},
                "regex":["^(\[[A-Za-z0-9-]*:[A-za-z0-9-]*\])|^(\[[A-Za-z0-9-]*[A-za-z0-9-]*\])"]
            
            }
        }
        return json.dumps(self.defaulprams, indent=3)


    def changeSetting(self, setting, value):
        '''changes a setting in the setting file'''
        jFile = open(self.filename, "r")
        ojFile = json.load(jFile)
        jFile.close()
        ojFile[setting] = value
        jFile = open(self.filename, "w")
        json.dump(ojFile, jFile, indent=3)
        jFile.close()


    def returnSettings(self) -> dict:
        '''returns the json file'''
        jFile = open(self.filename, "r")
        ojFile = json.load(jFile)
        jFile.close()
        return ojFile
    

