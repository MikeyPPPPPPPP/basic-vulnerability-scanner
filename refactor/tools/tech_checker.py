import re
import concurrent.futures

from tools.utils import unansi
from tools.command import get_otuput
from tools.utils import calculate_nuclei_template_timeout

class check_tech:
    def __init__(self, settings):
        self.settings = settings

    def check_tech(self) -> dict:
        """this will parse nuclei output"""
        if self.settings["debug_level"] == str(1):
            print("Using nuclei")
        if self.settings["debug_level"] == str(2):
            print("Using command")
            print(str(self.settings["nuclei"]["commands"]["advanced"]).replace("{url}", self.settings["url"]))


        out = self.check_nuclei(get_otuput(str(self.settings["nuclei"]["commands"]["advanced"]).replace("{url}", self.settings["url"]), timeout=calculate_nuclei_template_timeout("/home/kali/.local/nuclei-templates/technologies/", self.settings['timeout'])))
        return out
        
    def check_nuclei(self, output) -> dict:
        """this will return a list of good tech so we can do further processing on it"""
        good_tech = []
        possible_tech = []
        good_tech_test = {}
        with open("wordlists/tech-detect.txt", "r") as file:
            for line in file.readlines():
                possible_tech.append(line.strip())

        fileterd = [unansi(line) for line in output.split('\n') for item in possible_tech if item in line]
        
        for te in fileterd:
            found_tech = re.search(self.settings["nuclei"]["regex"][0], te)

            if found_tech.group(0).replace("[", "").replace("]","") in possible_tech:
                good_tech_test[te]=found_tech.group(0).replace("[", "").replace("]","")
            else:
                good_tech_test[te]=found_tech.group(0).replace("[", "").replace("]","")
        return good_tech_test
    
    def task_basic_check(self, template: str):
        """this will parse nuclei output"""
        if self.settings["debug_level"] == str(1):
            print("Using nuclei")
        if self.settings["debug_level"] == str(2):
            print("Using command")
            print(str(self.settings["nuclei"]["commands"]["basic"]).replace("{url}", self.settings["url"]).replace("{template}", template))
        out = self.check_nuclei(get_otuput(str(self.settings["nuclei"]["commands"]["basic"]).replace("{url}", self.settings["url"]).replace("{template}", template), timeout=150))
        return out
    
    def basic_check_tech(self) -> dict[str]:
        output_results = []
        final_output = {}
        with concurrent.futures.ThreadPoolExecutor(max_workers=len(self.settings['spacific_nuclei_templats']['basic tech'])) as executor:
            stuff = [executor.submit(self.task_basic_check, templ) for small, templ in self.settings['spacific_nuclei_templats']['basic tech'].items()]
            for future in concurrent.futures.as_completed(stuff):
                result = future.result()
                if result != None:
                    output_results.append(result)


        for dictanaries in output_results:
            for x,y in dictanaries.items():
                final_output[x]=y

        return final_output