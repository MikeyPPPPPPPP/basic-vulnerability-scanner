import concurrent.futures
import re

from tools.command import get_otuput
from tools.utils import unansi


class waf_detector:
    def __init__(self, setting: dict):
        self.setting = setting

    def wafw00f(self, output) -> str:
        """this will parse wafw00fs output"""
        if self.setting["debug_level"] == str(1):
            print("Using wafw00f")
        if self.setting["debug_level"] == str(2):
            print("Using command")
            print(str(self.setting["wafw00f"]["commands"]["firewall"]).replace("{url}", self.setting["url"]))

        for line in output.split("\n"):
            wafwo = re.search(self.setting["wafw00f"]["regex"][0], unansi(line))

            if wafwo:
                return wafwo.group(0)

        return "none found"
    

    def nuclei_Waf_detection(self, output) -> str:
        """this will parse nuclei output"""
        if self.setting["debug_level"] == str(1):
            print("Using nuclei")
        if self.setting["debug_level"] == str(2):
            print("Using command")
            print(str(self.setting["nuclei"]["commands"]["waf"]).replace("{url}", self.setting["url"]))
        for line in output.split('\n'):
            if "waf-detect" in line:
                #print(line)
                return line
        return "none found"
    
    def nuclei_DNS_Waf_detection(self, output) -> str:
        """this will parse nuclei output"""
        if self.setting["debug_level"] == str(1):
            print("Using nuclei")
        if self.setting["debug_level"] == str(2):
            print("Using command")
            print(str(self.setting["nuclei"]["commands"]["waf-dns"]).replace("{url}", self.setting["url"]))
        for line in output.split('\n'):
            if "dns-waf-detect" in line:
                #print(line)
                return line
        return "none found"
    

    def task_waf(self, program: str) -> str:
        if program == "wafw00f":
            wafwoof = self.wafw00f(get_otuput(str(self.setting["wafw00f"]["commands"]["firewall"]).replace("{url}", self.setting["url"])))
            return wafwoof

        if program == "nuclei_waf":
            wafdet = self.nuclei_Waf_detection(get_otuput(str(self.setting["nuclei"]["commands"]["waf"]).replace("{url}", self.setting["url"])))
            return wafdet
        
        if program == "nuclei_DNS_waf":
            dns_waf = self.nuclei_DNS_Waf_detection(get_otuput(str(self.setting["nuclei"]["commands"]["waf-dns"]).replace("{url}", self.setting["url"])))
            return dns_waf
        
    def check_WAF(self) -> list[str]:

        progs = ["wafw00f", "nuclei_waf", "nuclei_DNS_waf"]

        output_results = []

        with concurrent.futures.ProcessPoolExecutor(max_workers=3) as executor:
            stuff = [executor.submit(self.task_waf, pros) for pros in progs]
            for future in concurrent.futures.as_completed(stuff):
                result = future.result()
                if result != None:
                    output_results.append(result)

        return output_results[:]