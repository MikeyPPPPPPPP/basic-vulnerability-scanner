import re
import requests
from urllib.parse import urlparse
import os

def check_connection(url: str) -> int:
    """checks the respons time and make a prediction on a sufficent timeout"""
    req = requests.get(url, verify=False)
    if req.elapsed.total_seconds() < 1:
        print("This site is fast")
        return 1

    print(f"Site took {req.elapsed.total_seconds()} to respond")
    new_timeout = int(req.elapsed.total_seconds())+1
    return new_timeout
        


def build_base_url(url: str) -> str:
    """make the base url with hte schema and host"""
    sch = urlparse(url)[0]
    domain = urlparse(url)[1]
    return sch + "://" + domain


def unansi(text: str) -> str:
    """this will remove the coloring on the text that most tools put on there output"""
    #ansi_escape = re.compile(r'\r\x1b(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    ansi_escape = re.compile(r'\x1b(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    ansi_trail_escape = re.compile(r'ms\]\x1b\[0m')
    first = ansi_escape.sub('', text)
    final = ansi_trail_escape.sub('', first)
    return final


def detect_extention(url: str) -> str:
    """This will try to find the file extention of the site based on the response size of /index.*"""
    url = build_base_url(url)
    ext = [".html",".php",".aspx",".asp"]

    for ex in ext:
        if url.endswith(ex):
            return ex
        else:
            continue
    posible_ext = {'':0}

    if url.endswith("/") == False:
        url = url + "/"

    for x in ext:
        
        try:
            r = requests.get(url + "index" + x, verify=False)
            #if int(r.headers['content-length']) > int([x for x,y in posible_ext.items()][0]):
            if len(r.text) > int([y for x,y in posible_ext.items()][0]):

                posible_ext[x] = len(r.text)#r.headers['content-length']
        except Exception as e:
            pass

    count = 0
    good = ''
    for exte, cou in posible_ext.items():
        if cou > count:
            good = exte
            count = cou

    return good


def calculate_nuclei_template_timeout(template_dir: str, settings: int) -> int:
    """this will count the templats in the dir and make a prediction based on that and the timeouts set in the config"""
    prediction = 0 
    for root, dirs, files in os.walk(template_dir, topdown=False):
        prediction += len(files)

    return prediction * settings