import re
import concurrent.futures

from tools.utils import unansi, build_base_url
from tools.command import get_otuput


class check_misconfigurations:
    def __init__(self, settings):
        self.settings = settings

    def use_ffuf(self, tech: str, wordlist=None) -> list[str]:
        """This will use ffuf the try to find common misconfigured or exposed files using seclists"""
        """This only works on kali with (FFUF)Fuzz Faster U Fool - v2.0.0-dev  because of the regex"""
        lines_to_return = []

        if wordlist == None:
            command_to_run = self.settings["ffuf"]["commands"]["advanced"].replace("{url}", self.settings['base url']).replace("{tech}", self.settings['fuzzing wordlists']['misconfigurations']['technology'][tech]).replace("{ext}", self.settings['extention'])
        else:
            command_to_run = self.settings["ffuf"]["commands"]["basic"].replace("{url}", self.settings['base url']).replace("{wordlist}", wordlist).replace("{ext}", self.settings['extention'])



        output = get_otuput(command_to_run, timeout=350)
        
        for line in unansi(output).split("\n\n"):
            found_line = re.search(self.settings['ffuf']['regex'][0], line)


            if found_line:
                test = re.search(self.settings['ffuf']['regex'][1], found_line.group(0))
                if not test:
                    if found_line.group(0).startswith("\\") == False:
                        try:
                            lines_to_return.append(found_line.group(0).split("* FUZZ:")[-1])
                        except:
                            pass

        
        return lines_to_return
    
    def check_basic_misconfigs(self) -> list[list[str]]:
        """this will get the found tech and look for basic misconfigurations in the spacific tech"""
        found_misconfigs = []
        with concurrent.futures.ThreadPoolExecutor(max_workers=len(self.settings['fuzzing wordlists']['misconfigurations']['configs'])) as executor:
            futures = [executor.submit(self.use_ffuf, self.settings['tech'][0], self.settings['fuzzing wordlists']['misconfigurations']['configs'][x]) for x in self.settings['fuzzing wordlists']['misconfigurations']['configs']]
            for future in concurrent.futures.as_completed(futures):
                result = future.result()
                if result != None:
                    found_misconfigs.append(result)

        

        return found_misconfigs